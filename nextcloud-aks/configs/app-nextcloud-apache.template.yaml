##
# Kubernetes deployment configuration for running Nextcloud on Apache with
# `mod_php`.
#
# @author Guy Elsmore-Paddock (guy@inveniem.com)
# @copyright Copyright (c) 2019, Inveniem
# @license GNU AGPL version 3 or any later version
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nextcloud
spec:
  replicas: ${NEXTCLOUD_REPLICA_COUNT}
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: backend-nextcloud
  template:
    metadata:
      labels:
        app: backend-nextcloud
        role: backend
    spec:
      containers:
        # Container: The Apache-based Nextcloud backend
        - name: backend-nextcloud-apache
          image: "${REGISTRY_HOST}/inveniem/nextcloud-apache:${CONTAINER_VERSION}"
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          resources:
            requests:
              cpu: 25m
              memory: 128Mi
            limits:
              cpu: 1500m
              memory: 512Mi
          volumeMounts:
            - name: volume-nextcloud-app
              mountPath: /var/www/html
            - name: volume-nextcloud-config
              mountPath: /var/www/html/config
            # HACK: Until AKS supports pod presets, we have to kludge the dynamic
            # mounts in via a variable expansion. Do not modify the last line of
            # this comment; it gets expanded and replaced automatically when this
            # file is pre-processed. Remove this entire comment when switching over
            # to using pod presets.
            #
            # ${FILE_SHARE_VOLUME_MOUNT_LINES}
          env:
            - name: NEXTCLOUD_CONFIG_READ_ONLY
              value: "${NEXTCLOUD_CONFIG_READ_ONLY}"
            - name: NEXTCLOUD_TRUSTED_DOMAINS
              valueFrom:
                configMapKeyRef:
                  name: nextcloud-config
                  key: trusted_domains
            - name: NEXTCLOUD_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: "${KUBE_NEXTCLOUD_ADMIN_CREDS_SECRET}"
                  key: username
            - name: NEXTCLOUD_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "${KUBE_NEXTCLOUD_ADMIN_CREDS_SECRET}"
                  key: password
            - name: MYSQL_HOST
              valueFrom:
                secretKeyRef:
                  name: "${KUBE_NEXTCLOUD_MYSQL_CREDS_SECRET}"
                  key: hostname
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: "${KUBE_NEXTCLOUD_MYSQL_CREDS_SECRET}"
                  key: database
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: "${KUBE_NEXTCLOUD_MYSQL_CREDS_SECRET}"
                  key: username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "${KUBE_NEXTCLOUD_MYSQL_CREDS_SECRET}"
                  key: password
            - name: REDIS_HOST
              value: "localhost"
            - name: REDIS_PORT
              value: "6379"
            - name: REDIS_KEY
              valueFrom:
                secretKeyRef:
                  name: "${KUBE_REDIS_KEY_SECRET}"
                  key: key
          readinessProbe:
            httpGet:
              # This path should work both before and after installation.
              # In local testing, Nextcloud serves up the installer regardless
              # of which URL is provided.
              path: "/index.php/login?direct=1"
              port: 80
              httpHeaders:
                - name: "Host"
                  value: "${NEXTCLOUD_PRIMARY_HOSTNAME}"
            initialDelaySeconds: 1
            periodSeconds: 5
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: "/status.php"
              port: 80
              httpHeaders:
                - name: "Host"
                  value: "${NEXTCLOUD_PRIMARY_HOSTNAME}"
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 10
        # Container: Secure Tunnel Middleware
        - name: middle-stunnel
          image: "guyelsmorepaddock/stunnel:latest"
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 25m
              memory: 50Mi
            limits:
              cpu: 1000m
              memory: 128Mi
          env:
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: "${KUBE_REDIS_KEY_SECRET}"
                  key: hostname
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: "${KUBE_REDIS_KEY_SECRET}"
                  key: port
            - name: STUNNEL_SERVICE
              value: "redis"
            - name: STUNNEL_CLIENT
              value: "yes"
            - name: STUNNEL_ACCEPT
              value: "6379"
            - name: STUNNEL_CONNECT
              value: "$(REDIS_HOST):$(REDIS_PORT)"
            - name: STUNNEL_VERIFY_CHAIN
              value: "yes"
            - name: STUNNEL_CHECK_HOST
              value: "$(REDIS_HOST)"
            - name: STUNNEL_CIPHERS
              value: "DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA"
      imagePullSecrets:
        # NOTE: This secret is added by `setup_aks_acr_service_principal.sh`.
        - name: "${ACR_DOCKER_CREDS_SECRET}"
      volumes:
        # Ephemeral volume that contains the loaded Nextcloud software
        - name: volume-nextcloud-app
          emptyDir: {}
        # Remaining volumes are handled through Persistent Volume Claims
        - name: volume-nextcloud-config
          persistentVolumeClaim:
            claimName: claim-nextcloud-config
            readOnly: ${NEXTCLOUD_CONFIG_READ_ONLY}
        # HACK: Until AKS supports pod presets, we have to kludge the dynamic
        # mounts in via a variable expansion. Do not modify the last line of
        # this comment; it gets expanded and replaced automatically when this
        # file is pre-processed. Remove this entire comment when switching over
        # to using pod presets.
        #
        # ${FILE_SHARE_VOLUME_LINES}
---
apiVersion: v1
kind: Service
metadata:
  name: internal-nextcloud
  labels:
    role: internal-service
spec:
  type: ClusterIP
  ports:
    - port: 80
  selector:
    app: backend-nextcloud
